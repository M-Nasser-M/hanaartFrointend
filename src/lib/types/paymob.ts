import {
  Output,
  array,
  boolean,
  number,
  object,
  string,
  nullable,
  optional,
  union,
  literal,
  url,
  enum_,
} from "valibot";

export enum PaymentTypeEnum {
  CARD = "CARD",
  MOBILEWALLET = "MOBILEWALLET",
  CASH = "CASH",
}

export const PaymentTypeSchema = enum_(PaymentTypeEnum);

export type PaymentType = Output<typeof PaymentTypeSchema>;

export const PaymobUserSchema = object({
  id: number(),
  username: string(),
  first_name: string(),
  last_name: string(),
  date_joined: string(),
  email: string(),
  is_active: boolean(),
  is_staff: boolean(),
  is_superuser: boolean(),
  last_login: nullable(string()),
  groups: array(string()),
  user_permissions: array(number()),
});

export type PaymobUser = Output<typeof PaymobUserSchema>;

export const profileSchema = object({
  id: number(),
  user: PaymobUserSchema,
  created_at: string(),
  active: boolean(),
  profile_type: string(),
  phones: array(string()),
  company_emails: array(string()),
  company_name: string(),
  state: string(),
  country: string(),
  city: string(),
  postal_code: string(),
  street: string(),
  email_notification: boolean(),
  order_retrieval_endpoint: nullable(string()),
  delivery_update_endpoint: nullable(string()),
  logo_url: nullable(string()),
  is_mobadra: boolean(),
  sector: string(),
  is_2fa_enabled: boolean(),
  otp_sent_to: string(),
  activation_method: number(),
  signed_up_through: number(),
  failed_attempts: number(),
  custom_export_columns: array(string()),
  server_IP: array(string()),
  username: nullable(string()),
  primary_phone_number: string(),
  primary_phone_verified: boolean(),
  is_temp_password: boolean(),
  otp_2fa_sent_at: nullable(string()),
  otp_2fa_attempt: nullable(string()),
  otp_sent_at: string(),
  otp_validated_at: string(),
  awb_banner: nullable(string()),
  email_banner: nullable(string()),
  identification_number: nullable(string()),
  delivery_status_callback: string(),
  merchant_external_link: nullable(string()),
  merchant_status: number(),
  deactivated_by_bank: boolean(),
  bank_deactivation_reason: nullable(string()),
  bank_merchant_status: number(),
  national_id: nullable(string()),
  super_agent: nullable(string()),
  wallet_limit_profile: nullable(string()),
  address: nullable(string()),
  commercial_registration: nullable(string()),
  commercial_registration_area: nullable(string()),
  distributor_code: nullable(string()),
  distributor_branch_code: nullable(string()),
  allow_terminal_order_id: boolean(),
  allow_encryption_bypass: boolean(),
  wallet_phone_number: nullable(string()),
  suspicious: number(),
  latitude: nullable(string()),
  longitude: nullable(string()),
  bank_staffs: object({}),
  bank_rejection_reason: nullable(string()),
  bank_received_documents: boolean(),
  bank_merchant_digital_status: number(),
  bank_digital_rejection_reason: nullable(string()),
  filled_business_data: boolean(),
  day_start_time: string(),
  day_end_time: nullable(string()),
  withhold_transfers: boolean(),
  sms_sender_name: string(),
  withhold_transfers_reason: nullable(string()),
  withhold_transfers_notes: nullable(string()),
  can_bill_deposit_with_card: boolean(),
  can_topup_merchants: boolean(),
  topup_transfer_id: nullable(string()),
  referral_eligible: boolean(),
  is_eligible_to_be_ranger: boolean(),
  is_ranger: boolean(),
  is_poaching: boolean(),
  paymob_app_merchant: boolean(),
  settlement_frequency: nullable(string()),
  day_of_the_week: nullable(string()),
  day_of_the_month: nullable(string()),
  allow_transaction_notifications: boolean(),
  allow_transfer_notifications: boolean(),
  sallefny_amount_whole: number(),
  sallefny_fees_whole: number(),
  paymob_app_first_login: nullable(string()),
  paymob_app_last_activity: nullable(string()),
  payout_enabled: boolean(),
  payout_terms: boolean(),
  is_bills_new: boolean(),
  can_process_multiple_refunds: boolean(),
  settlement_classification: number(),
  instant_settlement_enabled: boolean(),
  instant_settlement_transaction_otp_verified: boolean(),
  preferred_language: string(),
  ignore_flash_callbacks: boolean(),
  acq_partner: nullable(string()),
  dom: nullable(string()),
  bank_related: nullable(string()),
  permissions: array(string()),
});

export const PaymobAuthResponseSchema = object({
  profile: profileSchema,
  token: string(),
});

export type PaymobAuthResponse = Output<typeof PaymobAuthResponseSchema>;

const shippingDataSchema = object({
  apartment: string(),
  email: string(),
  floor: string(),
  first_name: string(),
  street: string(),
  building: string(),
  phone_number: string(),
  postal_code: string(),
  extra_description: string(),
  city: string(),
  country: string(),
  last_name: string(),
  state: string(),
});

const shippingDetailsSchema = object({
  notes: string(),
  number_of_packages: number(),
  weight: number(),
  weight_unit: string(),
  length: number(),
  width: number(),
  height: number(),
  contents: string(),
});

const itemSchema = object({
  name: string(),
  amount_cents: string(),
  description: string(),
  quantity: string(),
});

const itemsSchema = union([array(itemSchema), array(itemSchema)]);

export const PaymobCreateOrderPayloadSchema = object({
  auth_token: string(),
  delivery_needed: boolean(),
  amount_cents: number(),
  currency: literal("EGP"),
  merchant_order_id: optional(number()),
  items: optional(itemsSchema),
  shipping_data: optional(shippingDataSchema),
  shipping_details: optional(shippingDetailsSchema),
});

export type PaymobCreateOrderPayload = Output<
  typeof PaymobCreateOrderPayloadSchema
>;

export const PaymobCreateOrderResponseSchema = object({
  id: number(),
  created_at: string(),
  delivery_needed: boolean(),
  merchant: object({
    id: number(),
    created_at: string(),
    phones: array(string()),
    company_emails: array(string()),
    company_name: string(),
    state: string(),
    country: string(),
    city: string(),
    postal_code: string(),
    street: string(),
  }),
  collector: nullable(object({})),
  amount_cents: number(),
  shipping_data: nullable(shippingDataSchema),
  currency: string(),
  is_payment_locked: boolean(),
  is_return: boolean(),
  is_cancel: boolean(),
  is_returned: boolean(),
  is_canceled: boolean(),
  merchant_order_id: nullable(number()),
  wallet_notification: nullable(object({})),
  paid_amount_cents: number(),
  notify_user_with_email: boolean(),
  items: itemsSchema,
  order_url: string(),
  commission_fees: number(),
  delivery_fees_cents: number(),
  delivery_vat_cents: number(),
  payment_method: string(),
  merchant_staff_tag: nullable(string()),
  api_source: string(),
  data: object({}),
  token: string(),
  url: string(),
});

export type PaymobCreateOrderResponse = Output<
  typeof PaymobCreateOrderResponseSchema
>;

export const BillingDataSchema = object({
  apartment: string(),
  email: string(),
  floor: string(),
  first_name: string(),
  street: string(),
  building: string(),
  phone_number: string(),
  shipping_method: optional(string()),
  postal_code: optional(string()),
  city: string(),
  country: string(),
  last_name: string(),
  state: optional(string()),
});

export type BillingData = Output<typeof BillingDataSchema>;

export const PaymobPaymentKeysPayloadSchema = object({
  auth_token: string(),
  amount_cents: number(),
  expiration: number(),
  order_id: number(),
  billing_data: BillingDataSchema,
  currency: literal("EGP"),
  integration_id: number(),
  lock_order_when_paid: optional(boolean()),
});

export type PaymobPaymentKeysPayload = Output<
  typeof PaymobPaymentKeysPayloadSchema
>;

export const PaymobPaymentKeysResponseSchema = object({ token: string() });

export type PaymobPaymentKeysResponse = Output<
  typeof PaymobPaymentKeysResponseSchema
>;

export const PaymobMobileWalletPayloadSchema = object({
  source: object({
    identifier: string(),
    subtype: literal("WALLET"),
  }),
  payment_token: string(),
});

export type PaymobMobileWalletPayload = Output<
  typeof PaymobMobileWalletPayloadSchema
>;

export const ShippingDataSchema = object({
  id: number(),
  first_name: string(),
  last_name: string(),
  street: string(),
  building: string(),
  floor: string(),
  apartment: string(),
  city: string(),
  state: string(),
  country: string(),
  email: string(),
  phone_number: string(),
  postal_code: string(),
  extra_description: string(),
  shipping_method: string(),
  order_id: number(),
});

export const MerchantSchema = object({
  id: number(),
  created_at: string(),
  state: string(),
  country: string(),
  city: string(),
  postal_code: string(),
  street: string(),
});

export const OrderSchema = object({
  id: number(),
  created_at: string(),
  delivery_needed: boolean(),
  merchant: MerchantSchema,
  collector: nullable(object({})),
  amount_cents: number(),
  shipping_data: ShippingDataSchema,
  currency: string(),
  is_payment_locked: boolean(),
  is_return: boolean(),
  is_cancel: boolean(),
  is_returned: boolean(),
  is_canceled: boolean(),
  merchant_order_id: nullable(number()),
  wallet_notification: nullable(object({})),
  paid_amount_cents: number(),
  notify_user_with_email: boolean(),
  items: itemsSchema,
  order_url: string(),
  commission_fees: number(),
  delivery_fees_cents: number(),
  delivery_vat_cents: number(),
  payment_method: string(),
  merchant_staff_tag: nullable(string()),
  api_source: string(),
  data: object({}),
});

export const PaymobMobileWalletResponseSchema = object({
  id: number(),
  pending: boolean(),
  amount_cents: number(),
  success: boolean(),
  is_auth: boolean(),
  is_capture: boolean(),
  is_standalone_payment: boolean(),
  is_voided: boolean(),
  is_refunded: boolean(),
  is_3d_secure: boolean(),
  integration_id: number(),
  profile_id: number(),
  has_parent_transaction: boolean(),
  order: OrderSchema,
  created_at: string(),
  transaction_processed_callback_responses: array(object({})),
  currency: string(),
  source_data: object({
    type: string(),
    phone_number: string(),
    owner_name: nullable(string()),
    sub_type: string(),
    pan: string(),
  }),
  api_source: string(),
  terminal_id: nullable(number()),
  merchant_commission: number(),
  installment: nullable(object({})),
  discount_details: array(object({})),
  is_void: boolean(),
  is_refund: boolean(),
  data: object({
    klass: string(),
    gateway_integration_pk: number(),
    order_info: string(),
    amount: number(),
    currency: string(),
    uig_txn_id: string(),
    message: string(),
    mpg_txn_id: string(),
    wallet_msisdn: string(),
    wallet_issuer: string(),
    txn_response_code: string(),
    token: string(),
    redirect_url: string(),
    mer_txn_ref: string(),
    upg_txn_id: nullable(string()),
    method: number(),
    created_at: string(),
    gateway_source: string(),
    upg_qrcode_ref: string(),
  }),
  is_hidden: boolean(),
  payment_key_claims: object({
    user_id: number(),
    amount_cents: number(),
    currency: string(),
    integration_id: number(),
    order_id: number(),
    billing_data: ShippingDataSchema,
    lock_order_when_paid: boolean(),
    extra: object({}),
    single_payment_attempt: boolean(),
    exp: number(),
    pmk_ip: string(),
  }),
  error_occured: boolean(),
  is_live: boolean(),
  other_endpoint_reference: string(),
  refunded_amount_cents: number(),
  source_id: number(),
  is_captured: boolean(),
  captured_amount: number(),
  merchant_staff_tag: nullable(string()),
  updated_at: string(),
  is_settled: boolean(),
  bill_balanced: boolean(),
  is_bill: boolean(),
  owner: number(),
  parent_transaction: nullable(object({})),
  redirect_url: string([url()]),
  iframe_redirection_url: string([url()]),
});

export type PaymobMobileWalletResponse = Output<
  typeof PaymobMobileWalletResponseSchema
>;

export const PaymobHmacTransactionObjectFrontendSchema = object({
  id: string(),
  pending: string(),
  amount_cents: string(),
  success: string(),
  is_auth: string(),
  is_capture: string(),
  is_standalone_payment: string(),
  is_voided: string(),
  is_refunded: string(),
  is_3d_secure: string(),
  integration_id: string(),
  profile_id: string(),
  has_parent_transaction: string(),
  order: string(),
  created_at: string(),
  currency: string(),
  merchant_commission: string(),
  discount_details: string(),
  is_void: string(),
  is_refund: string(),
  error_occured: string(),
  refunded_amount_cents: string(),
  captured_amount: string(),
  updated_at: string(),
  is_settled: string(),
  bill_balanced: string(),
  is_bill: string(),
  owner: string(),
  "data.message": string(),
  "source_data.type": string(),
  "source_data.pan": string(),
  "source_data.sub_type": string(),
  txn_response_code: string(),
  hmac: string(),
});

export type PaymobHmacTransactionObjectFrontend = Output<
  typeof PaymobHmacTransactionObjectFrontendSchema
>;

export const PaymobHmacTransactionObjectBackendSchema = object({
  obj: object({
    id: number(),
    pending: boolean(),
    amount_cents: number(),
    success: boolean(),
    is_auth: boolean(),
    is_capture: boolean(),
    is_standalone_payment: boolean(),
    is_voided: boolean(),
    is_refunded: boolean(),
    is_3d_secure: boolean(),
    integration_id: number(),
    profile_id: number(),
    has_parent_transaction: boolean(),
    order: object({
      id: number(),
      created_at: string(),
      delivery_needed: boolean(),
      merchant: object({
        id: number(),
        created_at: string(),
        phones: array(string()),
        company_emails: array(string()),
        company_name: string(),
        state: string(),
        country: string(),
        city: string(),
        postal_code: string(),
        street: string(),
      }),
      collector: optional(
        nullable(
          object({
            id: number(),
            created_at: string(),
            phones: array(string()),
            company_emails: array(string()),
            company_name: string(),
            state: string(),
            country: string(),
            city: string(),
            postal_code: string(),
            street: string(),
          })
        )
      ),
      amount_cents: number(),
      shipping_data: object({
        id: number(),
        first_name: string(),
        last_name: string(),
        street: string(),
        building: string(),
        floor: string(),
        apartment: string(),
        city: string(),
        state: string(),
        country: string(),
        email: string(),
        phone_number: string(),
        postal_code: string(),
        extra_description: string(),
        shipping_method: string(),
        order_id: number(),
      }),
      shipping_details: optional(
        object({
          id: number(),
          cash_on_delivery_amount: number(),
          cash_on_delivery_type: string(),
          latitude: nullable(string()),
          longitude: nullable(string()),
          is_same_day: boolean(),
          number_of_packages: number(),
          weight: number(),
          weight_unit: string(),
          length: number(),
          width: number(),
          height: number(),
          delivery_type: string(),
          return_type: nullable(string()),
          order_id: number(),
          notes: string(),
        })
      ),
      currency: string(),
      is_payment_locked: boolean(),
      is_return: boolean(),
      is_cancel: boolean(),
      is_returned: boolean(),
      is_canceled: boolean(),
      merchant_order_id: nullable(number()),
      wallet_notification: nullable(object({})),
      paid_amount_cents: number(),
      notify_user_with_email: boolean(),
      items: union([array(itemSchema), array(itemSchema)]),
      order_url: string(),
      commission_fees: number(),
      delivery_fees_cents: number(),
      delivery_vat_cents: number(),
      payment_method: string(),
      merchant_staff_tag: nullable(string()),
      api_source: string(),
      pickup_data: optional(nullable(object({}))),
      delivery_status: optional(array(object({}))),
    }),
    created_at: string(),
    transaction_processed_callback_responses: union([
      array(object({})),
      array(object({})),
    ]),
    currency: string(),
    source_data: object({
      pan: string(),
      type: string(),
      sub_type: string(),
    }),
    api_source: string(),
    terminal_id: nullable(number()),
    is_void: boolean(),
    is_refund: boolean(),
    data: object({
      acq_response_code: string(),
      avs_acq_response_code: string(),
      klass: string(),
      receipt_no: string(),
      order_info: string(),
      message: string(),
      gateway_integration_pk: number(),
      batch_no: string(),
      card_num: nullable(string()),
      secure_hash: string(),
      avs_result_code: string(),
      card_type: string(),
      merchant: string(),
      created_at: string(),
      merchant_txn_ref: string(),
      authorize_id: string(),
      currency: string(),
      amount: string(),
      transaction_no: string(),
      txn_response_code: string(),
      command: string(),
    }),
    is_hidden: boolean(),
    payment_key_claims: object({
      lock_order_when_paid: boolean(),
      integration_id: number(),
      billing_data: BillingDataSchema,
      order_id: number(),
      user_id: number(),
      pmk_ip: string(),
      exp: number(),
      currency: string(),
      amount_cents: number(),
    }),
    error_occured: boolean(),
    is_live: boolean(),
    other_endpoint_reference: nullable(string()),
    refunded_amount_cents: number(),
    source_id: number(),
    is_captured: boolean(),
    captured_amount: number(),
    merchant_staff_tag: nullable(string()),
    owner: number(),
    parent_transaction: nullable(object({})),
  }),
  type: literal("TRANSACTION"),
});

export type PaymobHmacTransactionObjectBackend = Output<
  typeof PaymobHmacTransactionObjectBackendSchema
>;
